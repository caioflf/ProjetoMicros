#include <stdio.h>
unsigned short ESQUINAS[12][2] = {
    420, 540,
    860, 540,
    1330, 540,
    1790, 540,
    420, 1060,
    860, 1060,
    1330, 1060,
    1790, 1060,
    420, 1580,
    860, 1580,
    1330, 1580,
    1790, 1580
};
unsigned int distancia(int x1, int y1, int x2, int y2) {
    return (x2 - x1)*(x2 - x1) + (y2 - y1)*(y2 - y1);
}
unsigned int modulo (int x){
    if (x < 0) {
        return -x;
    } else {
        return x;
    }
}
char esquinas_adjacentes (unsigned short x, unsigned short y, unsigned char vet[]){
    unsigned char i, qtd = 0, flag = 0;
    unsigned short aux = x;
    
    while(x >= 1 && x <= 2500 && flag == 0){
        x++;
        for (i = 0; i < 12; i++){
            if (x == ESQUINAS[i][0] && y == ESQUINAS[i][1]){
                vet[qtd] = i;
                qtd++;
                flag = 1;
            }
        }
    }
    flag = 0;
    x = aux;
    while(x >= 1 && x <= 2500 && flag == 0){
        x--;
        for (i = 0; i < 12; i++){
            if (x == ESQUINAS[i][0] && y == ESQUINAS[i][1]){
                vet[qtd] = i;
                qtd++;
                flag = 1;
            }
        }
    }
    flag = 0;
    x = aux;
    aux = y;
    while(y >= 1 && y <= 2500 && flag == 0){
        y++;
        for (i = 0; i < 12; i++){
            if (x == ESQUINAS[i][0] && y == ESQUINAS[i][1]){
                vet[qtd] = i;
                qtd++;
                flag = 1;
            }
        }
    }
    flag = 0;
    y = aux;
    while(y >= 1 && y <= 2500 && flag == 0){
        y--;
        for (i = 0; i < 12; i++){
            if (x == ESQUINAS[i][0] && y == ESQUINAS[i][1]){
                vet[qtd] = i;
                qtd++;
                flag = 1;
            }
        }
    }
    return qtd;
}
unsigned char escolhe_esquina(unsigned short x, unsigned short y, unsigned short x_final, unsigned short y_final){
    unsigned char i, esquina, qtd =0;;
    int menor_dist = 2147483647/2;
    unsigned char vet[4];
    qtd = esquinas_adjacentes(x,y,vet);
    for(i = 0; i< qtd; i++){
        if (menor_dist > distancia(ESQUINAS[vet[i]][0], ESQUINAS[vet[i]][1], x_final, y_final)){
            menor_dist = distancia(ESQUINAS[vet[i]][0], ESQUINAS[vet[i]][1], x_final, y_final);
            esquina = vet[i];
        }
    }
    return esquina;
}
unsigned char calcula_caminho (unsigned short x, unsigned short y, unsigned short x_final, unsigned short y_final, unsigned char trajeto[]){
    unsigned char atual, destino, qtd = 0, flag =0, i = 0;
    destino = escolhe_esquina(x_final,y_final,x,y);

    while (!flag){
        trajeto[i] = escolhe_esquina(x,y,x_final,y_final);
        x = ESQUINAS[trajeto[i]][0];
        y = ESQUINAS[trajeto[i]][1];
        i ++;
        if (x == ESQUINAS[destino][0] && y == ESQUINAS[destino][1]){
            flag = 1;
        }
    }
    return i;
}
unsigned int calcula_distancia(unsigned short x, unsigned short y, unsigned short x_final, unsigned short y_final){
    unsigned char qtd, i, trajeto[10];
    unsigned int distancia;
    qtd = calcula_caminho (x, y, x_final, y_final, trajeto);
    
    distancia = modulo(x - ESQUINAS[trajeto[0]][0] + y - ESQUINAS[trajeto[0]][1]);
    distancia = distancia + modulo (x_final - ESQUINAS[trajeto[qtd-1]][0] + y_final - ESQUINAS[trajeto[qtd-1]][1]);

    for (i = 0; i < qtd-1; i++){
        distancia = distancia + modulo(ESQUINAS[trajeto[i]][0] - ESQUINAS[trajeto[i+1]][0] + ESQUINAS[trajeto[i]][1] - ESQUINAS[trajeto[i+1]][1]);
    }
    return distancia;
}
void gps (unsigned short x, unsigned short y, unsigned short x_final, unsigned short y_final){
    unsigned char vet[4], proxima, sentido;
    unsigned short x_prox, y_prox;
    unsigned int dist_destino;
    proxima = escolhe_esquina(x, y, x_final, y_final);
    // para ponto atual
    x_prox = ESQUINAS[proxima][0];
    y_prox = ESQUINAS[proxima][1];
    if (x == x_final){
        if (y < y_final){
            sentido = 'S';
        } else if (y > y_final){
            sentido = 'N';
        } else {
            sentido = 'D';
        }
        
    } else if (y == y_final){
        if(x < x_final){
            sentido = 'L';
        } else if (x > x_final){
            sentido = 'O';
        } else {
            sentido = 'D';
        }
        
    } else if (x > x_prox){
        sentido = 'O';
    } else if (x < x_prox){
        sentido = 'L';
    } else if (y > y_prox){
        sentido = 'N';
    } else if (y < y_prox){
        sentido = 'S';
    }
    printf("%c", sentido);
    dist_destino = calcula_distancia(x,y,x_final,y_final);
    
    // para prox ponto
    if (x != x_final && y != y_final){
        x = x_prox;
        y = y_prox;
        proxima = escolhe_esquina(x, y, x_final, y_final);
        x_prox = ESQUINAS[proxima][0];
        y_prox = ESQUINAS[proxima][1];
        if (x == x_final){
        if (y < y_final){
            sentido = 'S';
        } else if (y > y_final){
            sentido = 'N';
        } else {
            sentido = 'D';
        }
    } else if (y == y_final){
        if(x < x_final){
            sentido = 'L';
        } else if (x > x_final){
            sentido = 'O';
        } else {
            sentido = 'D';
        }
    } else if (x > x_prox){
        sentido = 'O';
    } else if (x < x_prox){
        sentido = 'L';
    } else if (y > y_prox){
        sentido = 'N';
    } else if (y < y_prox){
        sentido = 'S';
    }
    printf("\nEm %im, siga a %c", abs(y-y_prox + x-x_prox), sentido);
    printf("\nDestino a %im", dist_destino);
    }
}

int main() { 
    unsigned char i, qtd, vet[4], esquina_carro, esquina_pass1, esquina_pass2, esquina_desti, trajeto[10];
    unsigned short  x_carro = 1450, y_carro = 1060,
                    x_passageiro = 420, y_passageiro = 510,
                    x_desti = 480, y_desti = 1580,
                    x = 1200, y = 1060;
    
    esquina_carro = escolhe_esquina(x_carro, y_carro, x_passageiro, y_passageiro);
    esquina_pass1 = escolhe_esquina(x_passageiro, y_passageiro, x_carro, y_carro);
    esquina_pass2 = escolhe_esquina(x_passageiro, y_passageiro, x_desti, y_desti);
    esquina_desti = escolhe_esquina(x_desti, y_desti, x_passageiro, y_passageiro);
    //printf("\n\nEsquina Carro = %i\nEsquina Pass1 = %i\nEsquina Pass2 = %i\nEsquina Desti = %i\n\n", esquina_carro, esquina_pass1, esquina_pass2, esquina_desti);
    
    qtd = calcula_caminho(x_carro, y_carro, x_passageiro, y_passageiro, trajeto);
    for (i = 0; i < qtd; i++){
        printf("%i ", trajeto[i]);
    }
    printf("\n");
    qtd = calcula_caminho(x_passageiro, y_passageiro, x_desti, y_desti, trajeto);
    for (i = 0; i < qtd; i++){
        printf("%i ", trajeto[i]);
    }
    printf("\n\nDist até o passageiro: %im",calcula_distancia(x_carro, y_carro, x_passageiro, y_passageiro));
    printf("\nDist até o destino: %im\n\n",calcula_distancia(x_passageiro, y_passageiro, x_desti, y_desti));
    printf("Em (%i, %i) seguir a: ", x,y);
    gps(x,y, x_passageiro, y_passageiro);
    
    return 0;
}
